{"version":3,"sources":["Home.js","App.js","reportWebVitals.js","index.js"],"names":["rpc","JsonRpc","fetch","Home","ual","transactionStakeToSelf","a","actions","account","name","data","from","activeUser","accountName","to","quantity","parseFloat","amountToSend","toFixed","memo","numberOfDaysOption","authorization","actor","permission","signTransaction","blocksBehind","expireSeconds","broadcast","sign","r","console","log","error","JSON","stringify","transactionStakeToUser","accountToStake","transactionDeposit","transactionUpdateBalance","username","transactionWithdraw","amount","SEND_OPTIONS","TRANSACTIONS","useState","setAccount","sendOption","setSendOption","setNumberOfDaysOptions","setAmountToSend","amountToBeStaked","setAmountToBeStaked","setAccountToStake","currentBalance","setCurrentBalance","response","setResponse","useEffect","interval","setInterval","get_table_rows","json","code","scope","table","limit","reverse","show_payer","table2","r1","r2","clearInterval","run","ex","exponent","tw","total_wax","cl","current_loaned","mdf","multi_day_fee","multiplier","Math","pow","total","i","length","wax","e","get_account","acc","openLoginModal","showModal","renderForm","style","margin","borderSpacing","textAlign","renderAmountToSendInput","renderNumberOfDaysDropdown","renderAmountToBeStaked","renderUserInput","renderUpdateBalance","renderWithdraw","width","type","value","onChange","target","toLocaleString","renderSubmitButton","onClick","call","core_liquid_balance","activeAuthenticator","logout","renderLogoutButton","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","myChain","chainId","rpcEndpoints","protocol","host","port","anchor","Anchor","appName","Wax","MyUALConsumer","withUAL","ReactDOM","render","StrictMode","chains","authenticators","document","getElementById"],"mappings":"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","file":"static/js/main.3834d833.chunk.js","sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { JsonRpc } from \"eosjs\";\r\n\r\n// const rpc = new JsonRpc(\"https://wax.greymass.com\", { fetch });\r\nconst rpc = new JsonRpc(\"https://testnet.wax.eosdetroit.io\", { fetch });\r\n\r\nconst Home = ({ ual }) => {\r\n  const transactionStakeToSelf = async () => {\r\n    const actions = {\r\n      actions: [\r\n        {\r\n          account: \"eosio.token\",\r\n          name: \"transfer\",\r\n          data: {\r\n            from: ual.activeUser.accountName,\r\n            to: \"cpu4\",\r\n            quantity: parseFloat(amountToSend).toFixed(8) + \" WAX\",\r\n            memo: numberOfDaysOption + \"\",\r\n          },\r\n          authorization: [\r\n            {\r\n              actor: ual.activeUser.accountName,\r\n              permission: \"active\",\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n    try {\r\n    const r = await ual.activeUser.signTransaction(actions, {\r\n      blocksBehind: 5,\r\n      expireSeconds: 300,\r\n      broadcast: true,\r\n      sign: true,\r\n    })\r\n    console.log(r);\r\n    } catch (e) {\r\n        console.error(e);\r\n        // process.exit();\r\n        console.log(JSON.stringify(e));\r\n    }\r\n  };\r\n\r\n  const transactionStakeToUser = async () => {\r\n    const actions = {\r\n      actions: [\r\n        {\r\n          account: \"eosio.token\",\r\n          name: \"transfer\",\r\n          data: {\r\n            from: ual.activeUser.accountName,\r\n            to: \"cpu4\",\r\n            quantity: parseFloat(amountToSend).toFixed(8) + \" WAX\",\r\n            memo: \"USER:\" + accountToStake + \",\" + numberOfDaysOption,\r\n          },\r\n          authorization: [\r\n            {\r\n              actor: ual.activeUser.accountName,\r\n              permission: \"active\",\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n    try {\r\n    const r = await ual.activeUser.signTransaction(actions, {\r\n      blocksBehind: 5,\r\n        expireSeconds: 300,\r\n        broadcast: true,\r\n        sign: true,\r\n    })\r\n    console.log(r);\r\n    } catch (e) {\r\n        console.error(e);\r\n        // process.exit();\r\n        console.log(JSON.stringify(e));\r\n    }\r\n  };\r\n\r\n  const transactionDeposit = async () => {\r\n    const actions = {\r\n      actions: [\r\n        {\r\n          account: \"eosio.token\",\r\n          name: \"transfer\",\r\n          data: {\r\n            from: ual.activeUser.accountName,\r\n            to: \"cpu4\",\r\n            quantity: parseFloat(amountToSend).toFixed(8) + \" WAX\",\r\n            memo: \"Deposit\",\r\n          },\r\n          authorization: [\r\n            {\r\n              actor: ual.activeUser.accountName,\r\n              permission: \"active\",\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n    try {\r\n    const r = await ual.activeUser.signTransaction(actions, {\r\n      blocksBehind: 5,\r\n      expireSeconds: 300,\r\n      broadcast: true,\r\n      sign: true,\r\n    })\r\n    console.log(r);\r\n    } catch (e) {\r\n        console.error(e);\r\n        // process.exit();\r\n        console.log(JSON.stringify(e));\r\n    }\r\n  };\r\n\r\n  const transactionUpdateBalance = async () => {\r\n    const actions = {\r\n      actions: [\r\n        {\r\n          account: \"cpu4\",\r\n          name: \"updateBalance\",\r\n          data: {\r\n            username: ual.activeUser.accountName,\r\n          },\r\n          authorization: [\r\n            {\r\n              actor: ual.activeUser.accountName,\r\n              permission: \"active\",\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n    try {\r\n    const r = await ual.activeUser.signTransaction(actions, {\r\n      blocksBehind: 5,\r\n      expireSeconds: 300,\r\n      broadcast: true,\r\n      sign: true,\r\n    })\r\n    console.log(r);\r\n    } catch (e) {\r\n        console.error(e);\r\n        // process.exit();\r\n        console.log(JSON.stringify(e));\r\n    }\r\n  };\r\n\r\n  const transactionWithdraw = async () => {\r\n    const actions = {\r\n      actions: [\r\n        {\r\n          account: \"cpu4\",\r\n          name: \"withdraw\",\r\n          data: {\r\n            username: ual.activeUser.accountName,\r\n            amount: parseFloat(amountToSend).toFixed(8) + \" WAX\",\r\n          },\r\n          authorization: [\r\n            {\r\n              actor: ual.activeUser.accountName,\r\n              permission: \"active\",\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n    try {\r\n    const r = await ual.activeUser.signTransaction(actions, {\r\n      blocksBehind: 5,\r\n      expireSeconds: 300,\r\n      broadcast: true,\r\n      sign: true,\r\n    })\r\n    console.log(r);\r\n    } catch (e) {\r\n        console.error(e);\r\n        // process.exit();\r\n        console.log(JSON.stringify(e));\r\n    }\r\n  };\r\n\r\n  const SEND_OPTIONS = {\r\n    self: \"Request Self Stake\",\r\n    other: \"Stake To User\",\r\n    deposit: \"Deposit And Earn\",\r\n    update: \"Update Balance\",\r\n    withdraw: \"Withdraw\",\r\n  };\r\n\r\n  const TRANSACTIONS = {\r\n    [SEND_OPTIONS.self]: transactionStakeToSelf,\r\n    [SEND_OPTIONS.other]: transactionStakeToUser,\r\n    [SEND_OPTIONS.deposit]: transactionDeposit,\r\n    [SEND_OPTIONS.update]: transactionUpdateBalance,\r\n    [SEND_OPTIONS.withdraw]: transactionWithdraw,\r\n\r\n  };\r\n\r\n  const [account, setAccount] = useState();\r\n  const [sendOption, setSendOption] = useState(SEND_OPTIONS.self);\r\n  const [numberOfDaysOption, setNumberOfDaysOptions] = useState(1);\r\n  const [amountToSend, setAmountToSend] = useState(0);\r\n  const [amountToBeStaked, setAmountToBeStaked] = useState(0);\r\n  const [accountToStake, setAccountToStake] = useState(\"\");\r\n  // const [exponent, setExponent] = useState(1);\r\n  // const [totalWax, setTotalWax] = useState();\r\n  // const [currentLoanedWax, setCurrentLoanedWax] = useState();\r\n  // const [multiDayFee, setMultiDayFee] = useState(0);\r\n  const [currentBalance, setCurrentBalance] = useState(0);\r\n  // const [updateTime, setUpdateTime] = useState();\r\n  const [response, setResponse] = useState();\r\n\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      console.log(\"FETCH\");\r\n      const table = await rpc.get_table_rows({\r\n        json: true, // Get the response as json\r\n        code: \"cpu4\", // Contract that we target\r\n        scope: \"cpu4\", // Account that owns the data\r\n        table: \"config\", // Table name\r\n        limit: 1, // Maximum number of rows that we want to get\r\n        reverse: false, // Optional: Get reversed data\r\n        show_payer: false, // Optional: Show ram payer\r\n      });\r\n      const table2 = await rpc.get_table_rows({\r\n        json: true, // Get the response as json\r\n        code: \"cpu4\", // Contract that we target\r\n        scope: \"cpu4\", // Account that owns the data\r\n        table: \"deposits\", // Table name\r\n        limit: 1000, // Maximum number of rows that we want to get\r\n        reverse: false, // Optional: Get reversed data\r\n        show_payer: false, // Optional: Show ram payer\r\n      });\r\n      setResponse({ r1: table, r2: table2 });\r\n    }, 5000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n\r\n\r\nuseEffect(() => {\r\n    if (amountToSend && amountToSend > 0) {\r\n      const run = async () => {\r\n        try {\r\n          const table = response.r1;\r\n          console.log(table[\"rows\"][0]);\r\n\r\n          const ex = parseFloat(table[\"rows\"][0].exponent);\r\n          const tw = parseFloat(table[\"rows\"][0].total_wax);\r\n          const cl = parseFloat(table[\"rows\"][0].current_loaned);\r\n          const mdf = parseFloat(table[\"rows\"][0].multi_day_fee);\r\n\r\n          if (amountToSend && amountToSend > 0) {\r\n            var multiplier = Math.pow((1.0 - (cl / tw)), ex) * 100;\r\n            if (multiplier < 10) {\r\n              multiplier = 10;\r\n            }\r\n            var total =\r\n              multiplier *\r\n              (1 - (mdf * (numberOfDaysOption - 1))) *\r\n              (amountToSend / numberOfDaysOption);\r\n            console.log(total);\r\n            setAmountToBeStaked(total);\r\n          }\r\n\r\n          const table2 = response.r2;\r\n\r\n          for (var i = 0; i < table2[\"rows\"].length; i++) {\r\n            if (table2[\"rows\"][i].account === account) {\r\n              setCurrentBalance(table2[\"rows\"][i].wax);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          console.error(e);\r\n          console.log(JSON.stringify(e));\r\n        }\r\n      };\r\n\r\n      run();\r\n    } else {\r\n      setAmountToBeStaked(0);\r\n    }\r\n  }, [amountToSend, numberOfDaysOption, response]);\r\n\r\n\r\n\r\n// useCallback(() => {\r\n// const getConfig = async () => {\r\n\r\n//   try {\r\n//     const table = await rpc.get_table_rows({\r\n//         json: true, // Get the response as json\r\n//         code: \"cpu4\", // Contract that we target\r\n//         scope: \"cpu4\", // Account that owns the data\r\n//         table: \"config\", // Table name\r\n//         limit: 1, // Maximum number of rows that we want to get\r\n//         reverse: false, // Optional: Get reversed data\r\n//         show_payer: false, // Optional: Show ram payer\r\n//     });\r\n//     console.log(table[\"rows\"][0]);\r\n//     setExponent(table[\"rows\"][0].exponent);\r\n//     setTotalWax(table[\"rows\"][0].total_wax);\r\n//     setCurrentLoanedWax(table[\"rows\"][0].current_loaned);\r\n//     setMultiDayFee(table[\"rows\"][0].multi_day_fee);\r\n\r\n//     if (amountToSend && amountToSend > 0) \r\n//     {\r\n//       var multiplier = (1.0 - (currentLoanedWax / totalWax)^(exponent)) * 100;\r\n//       if (multiplier < 10)\r\n//       {\r\n//           multiplier = 10;\r\n//       }\r\n//       var total = multiplier \r\n//         * (1 - (multiDayFee * (numberOfDaysOption - 1)))\r\n//         * (amountToSend / numberOfDaysOption);\r\n//       setAmountToBeStaked(total);\r\n//     }\r\n\r\n//     if (account) {\r\n//       const table2 = await rpc.get_table_rows({\r\n//           json: true, // Get the response as json\r\n//           code: \"cpu4\", // Contract that we target\r\n//           scope: \"cpu4\", // Account that owns the data\r\n//           table: \"deposits\", // Table name\r\n//           limit: 1000, // Maximum number of rows that we want to get\r\n//           reverse: false, // Optional: Get reversed data\r\n//           show_payer: false, // Optional: Show ram payer\r\n//       });\r\n\r\n//       for (var i = 0; i < table2[\"rows\"].length; i++) {\r\n//         if (table2[\"rows\"][i].account === account) \r\n//         {\r\n//           setCurrentBalance(table2[\"rows\"][i].wax);\r\n//         }\r\n//       }\r\n//     }\r\n//   } catch (e) {\r\n//     console.error(e);\r\n//     console.log(JSON.stringify(e));\r\n//   }\r\n// };\r\n// });\r\n\r\n  // const updateCost = async () => {\r\n  //   var multiplier = (1.0 - (currentLoanedWax / totalWax)^(exponent)) * 100;\r\n  //   if (multiplier < 10)\r\n  //   {\r\n  //       multiplier = 10;\r\n  //   }\r\n  //   var total = multiplier \r\n  //     * (1 - (multiDayFee * (numberOfDaysOption - 1)))\r\n  //     * (amountToSend / numberOfDaysOption);\r\n  //   setAmountToBeStaked(total);\r\n  // };\r\n\r\n  useEffect(() => {\r\n    const run = async () => {\r\n      if (ual.activeUser) {\r\n        try {\r\n          const acc = await rpc.get_account(ual.activeUser.accountName);\r\n          setAccount(acc);\r\n        } catch (e) {\r\n            console.error(e);\r\n            // process.exit();\r\n            console.log(JSON.stringify(e));\r\n        }\r\n\r\n      }\r\n    };\r\n    run();\r\n  }, [ual.activeUser]);\r\n\r\n\r\n\r\n  // useEffect(() => {\r\n  //   if (amountToSend && amountToSend > 0) {\r\n\r\n  //     // CALL CONTRACT / DO CALCULATION\r\n  //     // updateCost();\r\n  //     const run = async () => {\r\n  //       await getConfig();\r\n  //     };\r\n\r\n  //     run();\r\n  //   } else {\r\n  //     setAmountToBeStaked(0);\r\n  //   }\r\n  // }, [amountToSend,updateTime]);\r\n\r\n\r\n  // useEffect(() => {\r\n  //   const interval = setInterval(() => {\r\n  //     setUpdateTime(Date.now());\r\n  //   }, 5000);\r\n  //   return () => clearInterval(interval);\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   const interval = setInterval(() => {\r\n      // const run = async () => {\r\n      //   await getConfig();\r\n      // };\r\n\r\n      // run();\r\n\r\n  //   }, 5000);\r\n  //   return () => clearInterval(interval);\r\n  // }, [getConfig]);\r\n\r\n\r\n\r\n// useEffect(() => {\r\n//     const interval = setInterval(async () => {\r\n//         await getConfig();\r\n//     }, 5000);\r\n//     return () => clearInterval(interval);\r\n//   }, [getConfig]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const openLoginModal = () => {\r\n    if (!ual.activeUser) {\r\n      ual.showModal();\r\n    }\r\n  };\r\n\r\n  const renderLoginButton = () => {\r\n    return (\r\n      <div>\r\n        <button onClick={openLoginModal}>Login</button>\r\n        <br />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderLogoutButton = () => {\r\n    if (!!ual.activeUser && !!ual.activeAuthenticator) {\r\n      return (\r\n        <div>\r\n          <br />\r\n          <button onClick={ual.logout}>Logout</button>\r\n          <br />\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const renderNameAndBalance = () => {\r\n    return ual.activeUser && account ? (\r\n      <div>\r\n        {ual.activeUser.accountName} <br />\r\n        Current Balance: {account.core_liquid_balance}\r\n        <br />\r\n      </div>\r\n    ) : null;\r\n  };\r\n\r\n  const depositedWax = () => {\r\n    return ual.activeUser && account ? (\r\n      <div>\r\n        Deposited: {currentBalance}\r\n        <br />\r\n      </div>\r\n    ) : null;\r\n  };\r\n\r\n  const renderSelectSendOption = () => {\r\n    return (\r\n      <div>\r\n        <br />\r\n        <select\r\n          value={sendOption}\r\n          onChange={(e) => setSendOption(e.target.value)}\r\n        >\r\n          <option value={SEND_OPTIONS.self}>{SEND_OPTIONS.self}</option>\r\n          <option value={SEND_OPTIONS.other}>{SEND_OPTIONS.other}</option>\r\n          <option value={SEND_OPTIONS.deposit}>{SEND_OPTIONS.deposit}</option>\r\n          <option value={SEND_OPTIONS.update}>{SEND_OPTIONS.update}</option>\r\n          <option value={SEND_OPTIONS.withdraw}>{SEND_OPTIONS.withdraw}</option>\r\n        </select>\r\n        <br />\r\n        <br />\r\n        {renderForm()}\r\n        <br />\r\n        {renderSubmitButton()}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderForm = () => {\r\n    if (sendOption === SEND_OPTIONS.self) {\r\n      return (\r\n        <table\r\n          style={{\r\n            margin: \"auto\",\r\n            borderSpacing: \"12px 12px\",\r\n            textAlign: \"left\",\r\n          }}\r\n        >\r\n          <tbody>\r\n            {renderAmountToSendInput()}\r\n            {renderNumberOfDaysDropdown()}\r\n            {renderAmountToBeStaked()}\r\n          </tbody>\r\n        </table>\r\n      );\r\n    } else if (sendOption === SEND_OPTIONS.other) {\r\n      return (\r\n        <table\r\n          style={{\r\n            margin: \"auto\",\r\n            borderSpacing: \"12px 12px\",\r\n            textAlign: \"left\",\r\n          }}\r\n        >\r\n          <tbody>\r\n            {renderAmountToSendInput()}\r\n            {renderNumberOfDaysDropdown()}\r\n            {renderUserInput()}\r\n            {renderAmountToBeStaked()}\r\n          </tbody>\r\n        </table>\r\n      );\r\n    } else if (sendOption === SEND_OPTIONS.deposit) {\r\n      return (\r\n        <table\r\n          style={{\r\n            margin: \"auto\",\r\n            borderSpacing: \"12px 12px\",\r\n            textAlign: \"left\",\r\n          }}\r\n        >\r\n          <tbody>{renderAmountToSendInput()}</tbody>\r\n        </table>\r\n      );\r\n    } else if (sendOption === SEND_OPTIONS.update) {\r\n      return (\r\n        <table\r\n          style={{\r\n            margin: \"auto\",\r\n            borderSpacing: \"12px 12px\",\r\n            textAlign: \"left\",\r\n          }}\r\n        >\r\n          <tbody>{renderUpdateBalance()}</tbody>\r\n        </table>\r\n      );\r\n    } else if (sendOption === SEND_OPTIONS.withdraw) {\r\n      return (\r\n        <table\r\n          style={{\r\n            margin: \"auto\",\r\n            borderSpacing: \"12px 12px\",\r\n            textAlign: \"left\",\r\n          }}\r\n        >\r\n          <tbody>{renderWithdraw()}</tbody>\r\n        </table>\r\n      );\r\n    }\r\n  };\r\n\r\n  const renderUserInput = () => {\r\n    return (\r\n      <tr>\r\n        <td style={{ textAlign: \"right\" }}>User to stake to</td>\r\n        <td>\r\n          <input\r\n            style={{ width: \"120px\" }}\r\n            type=\"text\"\r\n            value={accountToStake}\r\n            onChange={(e) => setAccountToStake(e.target.value)}\r\n          />\r\n        </td>\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  const renderNumberOfDaysDropdown = () => {\r\n    return (\r\n      <tr>\r\n        <td style={{ textAlign: \"right\" }}>Number of days</td>\r\n        <td>\r\n          <select\r\n            value={numberOfDaysOption}\r\n            onChange={(e) => setNumberOfDaysOptions(e.target.value)}\r\n          >\r\n            <option value={1}>1</option>\r\n            <option value={2}>2</option>\r\n            <option value={3}>3</option>\r\n            <option value={4}>4</option>\r\n            <option value={5}>5</option>\r\n            <option value={6}>6</option>\r\n            <option value={7}>7</option>\r\n            <option value={8}>8</option>\r\n            <option value={9}>9</option>\r\n            <option value={10}>10</option>\r\n            <option value={11}>11</option>\r\n            <option value={12}>12</option>\r\n            <option value={13}>13</option>\r\n            <option value={14}>14</option>\r\n          </select>\r\n        </td>\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  const renderAmountToSendInput = () => {\r\n    return (\r\n      <tr>\r\n        <td style={{ textAlign: \"right\" }}>Amount to send</td>\r\n        <td>\r\n          <input\r\n            style={{ width: \"60px\" }}\r\n            type=\"number\"\r\n            value={amountToSend}\r\n            onChange={(e) => setAmountToSend(e.target.value)}\r\n          />{\" \"}\r\n          WAX\r\n        </td>\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  const renderUpdateBalance = () => {\r\n    return (\r\n      <tr>\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  const renderWithdraw = () => {\r\n    return (\r\n      <tr>\r\n        <td style={{ textAlign: \"right\" }}>Amount to withdraw</td>\r\n        <td>\r\n          <input\r\n            style={{ width: \"60px\" }}\r\n            type=\"number\"\r\n            value={amountToSend}\r\n            onChange={(e) => setAmountToSend(e.target.value)}\r\n          />{\" \"}\r\n          WAX\r\n        </td>\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  const renderAmountToBeStaked = () => {\r\n    return (\r\n      <tr>\r\n        <td style={{ textAlign: \"right\" }}>Amount to be staked</td>\r\n        <td>{amountToBeStaked.toLocaleString()} WAX</td>\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  const renderSubmitButton = () => {\r\n    return (\r\n      <div>\r\n        <button onClick={() => TRANSACTIONS[sendOption].call()}>\r\n          {sendOption}\r\n        </button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderFaq = () => {\r\n    return (\r\n      <div>\r\n        <h2>How it works:</h2>\r\n        <h4>Requesting Wax:</h4>\r\n        <p>1. Send wax</p>\r\n        <p>2. ????????</p>\r\n        <h4>Depositing Wax:</h4>\r\n        <p>3. Get steak</p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>CPU 4 SALE</h1>\r\n      {ual.activeUser ? renderNameAndBalance() : null}\r\n      {ual.activeUser ? depositedWax() : null}\r\n      {ual.activeUser ? renderLogoutButton() : renderLoginButton()}\r\n      {ual.activeUser ? renderSelectSendOption() : null}\r\n      <br />\r\n      {renderFaq()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import \"./App.css\";\nimport Home from \"./Home\";\n\nfunction App({ ual }) {\n  return (\n    <div className=\"App\">\n      <Home ual={ual} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { UALProvider, withUAL } from \"ual-reactjs-renderer\";\nimport { Anchor } from \"ual-anchor\";\nimport { Wax } from \"@eosdacio/ual-wax\";\n\n// const myChain = {\n//   chainId: \"1064487b3cd1a897ce03ae5b6a865651747e2e152090f99c1d19d44e01aea5a4\",\n//   rpcEndpoints: [\n//     {\n//       protocol: \"https\",\n//       host: \"wax.greymass.com\",\n//       port: \"443\",\n//     },\n//   ],\n// };\n\nconst myChain = {\n  chainId: \"f16b1833c747c43682f4386fca9cbb327929334a762755ebec17f6f23c9b8a12\",\n  rpcEndpoints: [\n    {\n      protocol: \"https\",\n      host: \"testnet.wax.eosdetroit.io\",\n      port: \"443\",\n    },\n  ],\n};\n\nconst anchor = new Anchor([myChain], { appName: \"cpu4\" });\nconst wax = new Wax([myChain], { appName: \"cpu4\" });\n\nconst MyUALConsumer = withUAL(App);\n\nReactDOM.render(\n  <React.StrictMode>\n    <UALProvider\n      chains={[myChain]}\n      authenticators={[anchor, wax]}\n      appName={\"cpu4\"}\n    >\n      <MyUALConsumer />\n    </UALProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}